from vpython import *
import math

# Set up the scene (canvas)
scene = canvas(title="3D Wind Tunnel", width=1000, height=600, center=vector(0, 0, 0), background=color.white)

# Adjust the lighting for better visibility
scene.lights = []
light = local_light(pos=vector(10, 10, 10), color=color.white)  # Light from above
ambient_light = distant_light(direction=vector(-1, -1, -1), color=color.gray(0.5))  # Ambient light

# Wind Tunnel Box (tunnel walls)
tunnel = box(pos=vector(0, 0, 0), size=vector(12, 4, 4), opacity=0.15, color=color.gray(0.8), texture=textures.wood)

# Contraction section (to accelerate airflow)
contraction = cone(pos=vector(-6, 0, 0), axis=vector(6, 0, 0), radius=1.5, color=color.cyan, texture=textures.earth)

# Diffuser section (to slow down the airflow)
diffuser = cone(pos=vector(6, 0, 0), axis=vector(6, 0, 0), radius=2, color=color.orange, texture=textures.wood)

# Airfoil (central object inside the test section)
airfoil = ellipsoid(pos=vector(0, 0, 0), length=2, height=0.6, width=1.5, color=color.red, shininess=0.8)

# Streamlines (airflow visualization)
streamlines = []
for y in [-1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5]:
    for z in [-1, 0, 1]:
        streamline = arrow(pos=vector(-6, y, z), axis=vector(0.5, 0, 0), color=color.cyan, shaftwidth=0.1)
        streamline.original_y = y
        streamline.original_z = z
        streamlines.append(streamline)

# Function to calculate vertical offset for streamlines as they pass the airfoil
def compute_offset(x_pos, y_original):
    """
    Compute the vertical offset for the streamlines near the airfoil.
    Simulates the separation of airflow when encountering the airfoil.
    """
    if -2 < x_pos < 2:
        return 0.4 * math.exp(-((x_pos - 0) ** 2) / (2 * 1.5**2))  # Separation effect around the airfoil
    return 0  # No offset after passing the airfoil

# Add labels to the parts of the wind tunnel
label1 = label(pos=vector(0, 2.2, 0), text="Test Section", height=15, box=False, color=color.black, opacity=0)
label2 = label(pos=vector(-3, 2.2, 0), text="Contraction", height=15, box=False, color=color.black, opacity=0)
label3 = label(pos=vector(5, 2.2, 0), text="Diffuser", height=15, box=False, color=color.black, opacity=0)
label4 = label(pos=vector(0, -2.5, 0), text="Airfoil", height=15, box=False, color=color.black, opacity=0)

# Animation loop to move the streamlines
while True:
    rate(60)  # Set the frame rate (60 frames per second)
    for streamline in streamlines:
        streamline.pos.x += 0.1  # Move the streamline forward

        # Apply vertical offset (separation effect) as the streamline approaches the airfoil
        y_offset = compute_offset(streamline.pos.x, streamline.original_y)
        streamline.pos.y = streamline.original_y + y_offset  # Update y position based on separation

        # Add gradual fading effect for realism (change color and opacity of streamlines as they move)
        streamline.color = color.cyan if streamline.pos.x < 2 else color.yellow
        streamline.opacity = 1.0 - (streamline.pos.x / 10.0)  # Streamline fades as it moves

        # Reset streamlines after passing the test section (looping behavior)
        if streamline.pos.x > 6:
            streamline.pos.x = -6
            streamline.pos.y = streamline.original_y  # Reset vertical position when looping
            streamline.opacity = 1.0  # Reset opacity
